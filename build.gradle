apply plugin:'java'

repositories{
        jcenter()
        mavenCentral()
    }

dependencies {
	compile group: 'axis', name: 'axis-ant', version: '1.4'
	compile group: 'org.apache.axis', name: 'axis', version: '1.4'
	compile group: 'javax.xml', name: 'jaxrpc-api', version: '1.1'
	compile group: 'commons-logging', name: 'commons-logging', version: '1.0.4'
	compile group: 'commons-discovery', name: 'commons-discovery', version: '0.2'
	compile group: 'wsdl4j', name: 'wsdl4j', version: '1.5.1'
	compile group: 'javax.xml.soap', name: 'saaj-api', version: '1.3'
	compile group: 'log4j', name: 'log4j', version: '1.2.8'
	compile group: 'junit', name: 'junit', version: '4.4'
    }

configurations {
    jar.archiveName = jar_name
}

task axisWSDLTojava() {
       println "-- Inside axisWSDLToJava"
       def flGen = new File( "$projectDir/src/main/java" )
       flGen.mkdirs()

       ant {
            taskdef(
            resource: 'axis-tasks.properties',
            classpath: configurations.compile.asPath )
	    if (!wsdlPackageMapping.isEmpty()) {
    	    	wsdl.split(',').each { 
             		"axis-wsdl2java"(
             		output: "$projectDir/src/main/java",
              		testcase: "true",
              		url: it)
    		}   	
	}

	 if (!wsdlPackageMapping.isEmpty()) {	
	   wsdlPackageMapping.split(',').each {wsdlWithMappingFile ->
		def values = wsdlWithMappingFile.split(':') 
		"axis-wsdl2java"(
             	 	output: "$projectDir/src/main/java",
              		testcase: "true",
              		url: values[0],
			namespacemappingfile: values[1])	
  			}
		}
	}
}
